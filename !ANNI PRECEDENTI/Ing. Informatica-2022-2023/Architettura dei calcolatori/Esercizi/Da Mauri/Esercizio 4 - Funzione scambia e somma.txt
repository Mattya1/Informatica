# int scambia_somma (int v[],int k){
#     int temp;
#     temp=v[k];
#     v[k]=v[k+1];
#     v[k+1]=temp;
#     int risultato=0;
#     risultato=v[k]+v[k+1];
#     return risultato;
# }

# int main()
# {
#     int v[]={1,2,3,4,5};
#     int k=2;
#     int r=0;
#     r=scambia_somma(v,k);
#     cout<<r;
#     return 0;
# }

.text
.globl main

         main:
             la    $a0, array
             addi  $a1, $zero, 2  # k=2
             addi  $s0, $zero, 0  # r=0
             addi  $sp, $sp, -4   # memorizzo indirizzo
             sw    $ra, 0($sp)    # di ritorno
             jal   scambia_somma  # vai alla funzione
             lw    $ra, 0($sp)    # ripristino indirizzo
             addi  $sp, $sp, 4    # di ritorno
             addi  $s0, $t3, 0
             jr    $ra

scambia_somma:
             mul   $t0, $a1, 2    # calcolo indice
             mul   $t0, $t0, 2    # esempio indice 3 -> $t0 = 3 * 2 = 6 , $t0 = 6 * 2 -> 12 byte
             add   $t0, $a0, $t0  # $t0 <-- adress_v[k]
             lw    $t1, 0($t0)    # $t1 <-- 3
             lw    $t2, 4($t0)    # $t2 <-- 4
             sw    $t1, 4($t0)    
             sw    $t2, 0($t0)
             addi  $t3, $zero, 0  # risultato=0
             add   $t3, $t1, $t2  # risultato=v[k] + v[k+1]
             jr    $ra

             
              
     

.data
array: .word 1, 2, 3, 4, 5 