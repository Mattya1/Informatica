# int fattoriale (int n)
# {
#     int r = n;
#     for (int i = n - 1;i > 0; i--){
#         n--;
#         r *= n;
#     }
#     return r;
# }
# int main()
# {
#     int n;
#     cin >> n;
#     cout << fattoriale(n) << endl;
#     return 0;
# }


.text
.globl main

fattoriale:  slti  $t0, $a0, 2     # t0 = 1 se n < 2
             bne   $t0, $zero, base# se t0 != 0 go to base
             move  $v0, $a0        # Risultato in v0 
             addi  $t1, $a0, -1    # i = n - 1
loop:        blez  $t1, end        # if i <= 0 go to end
             addi  $a0, $a0, -1    # n-- 
             mul   $v0, $v0, $a0   # r = r * n
             addi  $t1, $t1, -1    # i--
             j     loop 
base:        addi  $v0, $zero, 1   # return 1
end:         jr    $ra



main:        li    $v0, 5          # Read int
             syscall               # Chiamata a sistema
             move  $a0, $v0        # Salvo in a0
             addi  $sp, $sp, -4    # Alloco lo stack
             sw    $ra, 0($sp)     # Salvo indirizzo di ritorno
             jal   fattoriale      # Chiamo la funzione
             lw    $ra, 0($sp)     # Ripristino indirizzo
             addi  $sp, $sp, 4     # Dealloco lo stack
             move  $a0, $v0        # Salvo il risultato della chiamata in a0
             li    $v0, 1          # Print int
             syscall               # Chiamata a sistema
             jr    $ra             